Data Science : Process of analyzing large set of data to get answers related to that data set


import pandas as pd
data_frame = pd.read_csv("/Users/Shaheen/Desktop/Vineet/MS_SE_Spring2019/Python/Pandas/weather.csv")
data_frame

data_frame will print the content of the csv file

====================>
Max Temp:
data_frame['Temperature'].max()
OR
data_frame.temperature.max()

====================>
Dates when it rained :
data_frame['EST'][data_frame['Events']=='Rain']


df['day'][df['event']=='Rain']
OR
df.day[df.event=='Rain']
====================>
Average Wind speed :

			================================================
			= NOTE : Replace NaN by fillna not by replace  =
			================================================

data_frame['WindSpeedMPH'].mean()

NOTE- If some columns will have null values, we need to clean that data.
=====
Process of cleaning messy data is called "data munging" or "data wrangling".
										=====================================
====================>
data_frame.fillna(0, inplace=True)
data_frame['WindSpeedMPH'].mean()

============================================================================================================
Data Frame is the main object in panda. It is used to represent data with rows and columns (tabular data)
============================================================================================================

====================>
import pandas as pd
df = pd.read_csv("/Users/Shaheen/Desktop/Vineet/MS_SE_Spring2019/Python/Pandas/weather.csv")
df

====================>
import pandas as pd
weather_data = {
    'day': ['1/1/2017','1/2/2017','1/3/2017','1/4/2017','1/5/2017','1/6/2017'],
    'temperature': [32,35,28,24,32,31],
    'windspeed': [6,7,2,7,4,2],
    'event': ['Rain', 'Sunny', 'Snow','Snow','Rain', 'Sunny']
}
df = pd.DataFrame(weather_data)
df

====================>
df.shape
(6,4)

rows, col = df.shape
rows
6

cols
4

====================>

df.head() : Pandas head() method is used to return top n (5 by default) rows of a data frame or series.

df.head()		=> Returns top 5 rows 	[Excluding header]
df.head(2)		=> Returns top 2 rows  	[Excluding header]
df.head(12)		=> Returns top 12 rows	[Excluding header]

df.tail() : Pandas head() method is used to return last n (5 by default) rows of a data frame or series.

df.tail()		=> Returns last 5 rows	[order n-4, n-3, n-2, n-1, n]
df.tail(2)		=> Returns last 2 rows
df.tail(12)		=> Returns last 12 rows

df.head(-2) 	= > Returns from 0 to n-2
df.tail(-2) 	= > Returns from 3rd till last record

===================>
Indexing:

df[2:5]			=> Prints from for 2 to 4

df.columns		=> Prints the column : Index(['day', 'temperature', 'windspeed', 'event'], dtype='object')

To print columns data:

df.day or df['day']
df.temperature or df['temperature']

To print multiple columns :
df[['day','temperature']]

df['temperature'].std()

df['temperature'].min()

===================>

To print statistics :

df.describe()

temperature	windspeed
count	6.000000	6.000000
mean	30.333333	4.666667
std		3.829708	2.338090
min		24.000000	2.000000
25%		28.750000	2.500000
50%		31.500000	5.000000
75%		32.000000	6.750000
max		35.000000	7.000000

===================>

Filtering:

When temperature >= 30
df[df['temperature']>30] 	OR 	df[df.temperature>30]

To get only the days:
df['day'][df['temperature']>30] 	OR     df.day[df.temperature>30]

df['temperature'].max()	OR	df.temperature.max()

When temperature was max :

df[df.temperature == df.temperature.max()]

df[df['temperature'] == df['temperature'].max()]

df[['day','temperature']][df['temperature'] == df['temperature'].max()]

df.index : RangeIndex(start=0, stop=6, step=1)

===================>

df

	day			temperature	windspeed	event
0	1/1/2017	32				6		Rain
1	1/2/2017	35				7		Sunny
2	1/3/2017	28				2		Snow
3	1/4/2017	24				7		Snow
4	1/5/2017	32				4		Rain
5	1/6/2017	31				2		Sunny


df.set_index('day')

The index is changed to 'day'

day		temperature	windspeed	event
1/1/2017	32			6		Rain
1/2/2017	35			7		Sunny
1/3/2017	28			2		Snow
1/4/2017	24			7		Snow
1/5/2017	32			4		Rain
1/6/2017	31			2		Sunny


df

	day			temperature	windspeed	event
0	1/1/2017	32				6		Rain
1	1/2/2017	35				7		Sunny
2	1/3/2017	28				2		Snow
3	1/4/2017	24				7		Snow
4	1/5/2017	32				4		Rain
5	1/6/2017	31				2		Sunny

To modify the data set, use inplace

df.set_index('day', inplace = True)		: Now 'day' becomes the index

df

day		temperature	windspeed	event
1/1/2017	32			6		Rain
1/2/2017	35			7		Sunny
1/3/2017	28			2		Snow
1/4/2017	24			7		Snow
1/5/2017	32			4		Rain
1/6/2017	31			2		Sunny

df.loc['1/3/2017']

temperature      28
windspeed         2
event          Snow
Name: 1/3/2017, dtype: object

NOTE = If we have two rows with the same index, we get two rows of printing df
======
To reset the index

df.reset_index(inplace = True)
df

	day			temperature	windspeed	event
0	1/1/2017	32				6		Rain
1	1/2/2017	35				7		Sunny
2	1/3/2017	28				2		Snow
3	1/4/2017	24				7		Snow
4	1/5/2017	32				4		Rain
5	1/6/2017	31				2		Sunny


df.loc['2']

temperature      28
day            1/3/2017
temperature          28
windspeed             2
event              Snow
Name: 2, dtype: object


============================================================================================================
----------------------						CREATING DATA FRAMES					------------------------
============================================================================================================

1- Using csv

import pandas as pd
df = pd.read_csv("/Users/Shaheen/Desktop/Vineet/MS_SE_Spring2019/Python/Pandas/weather.csv")
df

2- Using xls

import pandas as pd
df = pd.read_excel("/Users/Shaheen/Desktop/Vineet/MS_SE_Spring2019/Python/Pandas/weather_data.xlsx")
df

3- Using dictionary

import pandas as pd
weather_data = {
    'day': ['1/1/2017','1/2/2017','1/3/2017','1/4/2017','1/5/2017','1/6/2017'],
    'temperature': [32,35,28,24,32,31],
    'windspeed': [6,7,2,7,4,2],
    'event': ['Rain', 'Sunny', 'Snow','Snow','Rain', 'Sunny']
}
df = pd.DataFrame(weather_data)
df

4- Using tuples-

import pandas as pd
weather_data = [
    ('1/1/2017',32,6,'Rain'),
    ('1/2/2017',35,7,'Sunny'),
    ('1/3/2017',28,2,'Snow')
]
df = pd.DataFrame(data=weather_data, columns=['day','temperature','windspeed','event'])
df

5- Using List

import pandas as pd
weather_data = [
    {'day': '1/1/2017', 'temperature': 32, 'windspeed': 6, 'event': 'Rain'},
    {'day': '1/2/2017', 'temperature': 35, 'windspeed': 7, 'event': 'Sunny'},
    {'day': '1/3/2017', 'temperature': 28, 'windspeed': 22, 'event': 'Snow'},

]
df = pd.DataFrame(data=weather_data)
df














