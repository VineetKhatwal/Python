============================================================================================================
								Day 4 - Reading and Writing Excel File
============================================================================================================

=======================================
		Reading CSV File:
=======================================

import pandas as pd
df = pd.read_csv('/Users/Shaheen/Desktop/Vineet/MS_SE_Spring2019/Python/Pandas/stock_data.csv')
df

=========================>
Extra Row : We would want to skip this row

import pandas as pd
df = pd.read_csv('/Users/Shaheen/Desktop/Vineet/MS_SE_Spring2019/Python/Pandas/stock_data extraheader.csv')
df

Extra				
tickers	eps	revenue	price	people
GOOGL	27.82	87	845	larry page
WMT		4.61	484	65	n.a.
MSFT	-1	85	64	bill gates
RIL 	not available	50	1023	mukesh ambani
TATA	5.6	-1	n.a.	ratan tata

Result-

	Extra	Unnamed: 1	Unnamed: 2	Unnamed: 3	Unnamed: 4
0	tickers	eps	revenue	price	people
1	GOOGL	27.82	87	845	larry page
2	WMT	4.61	484	65	n.a.
3	MSFT	-1	85	64	bill gates
4	RIL	not available	50	1023	mukesh ambani
5	TATA	5.6	-1	n.a.	ratan tata

SKIPROWS-
==============

import pandas as pd
df = pd.read_csv('/Users/Shaheen/Desktop/Vineet/MS_SE_Spring2019/Python/Pandas/stock_data extraheader.csv', skiprows = 1)
df

skiprows = 1 will skip the first row

skiprows = n will skip the first n rows

HEADER-
==============
import pandas as pd
df = pd.read_csv('/Users/Shaheen/Desktop/Vineet/MS_SE_Spring2019/Python/Pandas/stock_data extraheader.csv', header = 1)
df

header = 0 : Will treat the first row as header and display all the rows
header = 1 : Will treat the second row as header and display all the remaining rows(from 3 till end) as the data
header = 4 : Will treat the fifth row as header and display all the remaining rows(from 6 till end) as the data

NO HEADER IN FILE-
===================

import pandas as pd
df = pd.read_csv('/Users/Shaheen/Desktop/Vineet/MS_SE_Spring2019/Python/Pandas/stock_data noheader.csv', header=None)
df

	0		1		2	3	4
0	GOOGL	27.82	87	845	larry page
1	WMT	4.61	484	65	n.a.
2	MSFT	-1	85	64	bill gates
3	RIL	not available	50	1023	mukesh ambani
4	TATA	5.6	-1	n.a.	ratan tata

import pandas as pd
df = pd.read_csv('/Users/Shaheen/Desktop/Vineet/MS_SE_Spring2019/Python/Pandas/stock_data noheader.csv', header=None, names=['ticker','eps','revenue','price','people'])
df

	ticker	eps	revenue	price	people
0	GOOGL	27.82	87	845	larry page
1	WMT	4.61	484	65	n.a.
2	MSFT	-1	85	64	bill gates
3	RIL	not available	50	1023	mukesh ambani
4	TATA	5.6	-1	n.a.	ratan tata

TO READ n ROWS - Use nrows or head
====================


import pandas as pd
df = pd.read_csv('/Users/Shaheen/Desktop/Vineet/MS_SE_Spring2019/Python/Pandas/stock_data.csv', nrows=3)
df

import pandas as pd
df = pd.read_csv('/Users/Shaheen/Desktop/Vineet/MS_SE_Spring2019/Python/Pandas/stock_data.csv').head(3)
df
    
import pandas as pd
df = pd.read_csv('/Users/Shaheen/Desktop/Vineet/MS_SE_Spring2019/Python/Pandas/stock_data.csv')
df.head(3)

complaints['Complaint Type'].value_counts()

To Replace n.a. or not available values -
=========================================

import pandas as pd
df = pd.read_csv('/Users/Shaheen/Desktop/Vineet/MS_SE_Spring2019/Python/Pandas/stock_data.csv', na_values=["not available" , "n.a."])
df

DATE-
tickers	eps	revenue	price	people
GOOGL	27.82	87	845	larry page
WMT	4.61	484	65	n.a.
MSFT	-1	85	64	bill gates
RIL 	not available	50	1023	mukesh ambani
TATA	5.6	-1	n.a.	ratan tata

Refined Date-

	tickers	eps		revenue	price	people
0	GOOGL	27.82	87		845.0	larry page
1	WMT		4.61	484		65.0	NaN
2	MSFT	-1.00	85		64.0	bill gates
3	RIL		NaN		50		1023.0	mukesh ambani
4	TATA	5.60	-1		NaN		ratan tata

Here revenue is negative, we need to convert it to NaN
But eps shud not be NaN, only revenue shud be -ve. 
We use dictionary in this case


import pandas as pd
df = pd.read_csv('/Users/Shaheen/Desktop/Vineet/MS_SE_Spring2019/Python/Pandas/stock_data.csv', na_values={
    'eps':["not available" , "n.a."],
    'revenue':["not available" , "n.a.", -1],
    'price':["not available" , "n.a."],
    'people':["not available" , "n.a."],    
})
df

	tickers	eps		revenue	price	people
0	GOOGL	27.82	87.0	845.0	larry page
1	WMT		4.61	484.0	65.0	NaN
2	MSFT	-1.00	85.0	64.0	bill gates
3	RIL		NaN		50.0	1023.0	mukesh ambani
4	TATA	5.60	NaN		NaN		ratan tata

=======================================
		Writing CSV File:
=======================================

import pandas as pd
df = pd.read_csv('/Users/Shaheen/Desktop/Vineet/MS_SE_Spring2019/Python/Pandas/stock_data.csv', na_values={
    'eps':["not available" , "n.a."],
    'revenue':["not available" , "n.a.", -1],
    'price':["not available" , "n.a."],
    'prople':["not available" , "n.a."],    
})
df
df.to_csv('/Users/Shaheen/Desktop/Vineet/MS_SE_Spring2019/Python/Pandas/new_data.csv')


	tickers	eps		revenue	price	people
0	GOOGL	27.82	87		845		larry page
1	WMT		4.61	484		65		
2	MSFT	-1		85		64		bill gates
3	RIL 			50		1023	mukesh ambani
4	TATA	5.6						ratan tata

NOTE -
======
1- It also writes the index
2- All numeric values as NaN are blank in csv file created

To remove index, we need to specify index = false

import pandas as pd
df = pd.read_csv('/Users/Shaheen/Desktop/Vineet/MS_SE_Spring2019/Python/Pandas/stock_data.csv', na_values={
    'eps':["not available" , "n.a."],
    'revenue':["not available" , "n.a.", -1],
    'price':["not available" , "n.a."],
    'people':["not available" , "n.a."],    
})
df
df.to_csv('/Users/Shaheen/Desktop/Vineet/MS_SE_Spring2019/Python/Pandas/new_data.csv', index =False)


tickers	eps		revenue	price	people
GOOGL	27.82	87		845		larry page
WMT		4.61	484		65	
MSFT	-1		85		64		bill gates
RIL 			50		1023	mukesh ambani
TATA	5.6						ratan tata

To write specific columns in the file created:
===============================================

import pandas as pd
df = pd.read_csv('/Users/Shaheen/Desktop/Vineet/MS_SE_Spring2019/Python/Pandas/stock_data.csv', na_values={
    'eps':["not available" , "n.a."],
    'revenue':["not available" , "n.a.", -1],
    'price':["not available" , "n.a."],
    'people':["not available" , "n.a."],    
})
df
df.to_csv('/Users/Shaheen/Desktop/Vineet/MS_SE_Spring2019/Python/Pandas/new_data.csv', index =False, columns = ["tickers","eps"])


tickers		eps
GOOGL		27.82
WMT			4.61
MSFT		-1
RIL 	
TATA		5.6

To skip header -
================

import pandas as pd
df = pd.read_csv('/Users/Shaheen/Desktop/Vineet/MS_SE_Spring2019/Python/Pandas/stock_data.csv', na_values={
    'eps':["not available" , "n.a."],
    'revenue':["not available" , "n.a.", -1],
    'price':["not available" , "n.a."],
    'people':["not available" , "n.a."],    
})
df
df.to_csv('/Users/Shaheen/Desktop/Vineet/MS_SE_Spring2019/Python/Pandas/new_data.csv', index =False, columns = ["tickers","eps"], header = False)


GOOGL	27.82
WMT		4.61
MSFT	-1
RIL 	
TATA	5.6


=======================================
		Reading EXCEL File:
=======================================

import pandas as pd
df = pd.read_excel('/Users/Shaheen/Desktop/Vineet/MS_SE_Spring2019/Python/Pandas/stock_data.xlsx', "stock_data")
df


		tickers	eps				revenue		price	people
0		GOOGL	27.82			87			845		larry page
1		WMT		4.61			484			65		n.a.
2		MSFT	-1	85			64					bill gates
3		RIL		not available	50			1023	mukesh ambani
4		TATA	5.6				-1			n.a.	ratan tata

To convert values in Excel File, use converter :

import pandas as pd

def convert(cell):
    if cell == 'n.a.':
        return "Sam Walton"
    return cell
df = pd.read_excel('/Users/Shaheen/Desktop/Vineet/MS_SE_Spring2019/Python/Pandas/stock_data.xlsx', "stock_data"
                  , converters ={
                      'people' : convert
                  })
df


		tickers	eps				revenue		price	people
0		GOOGL	27.82			87			845		larry page
1		WMT		4.61			484			65		Sam Walton
2		MSFT	-1	85			64					bill gates
3		RIL		not available	50			1023	mukesh ambani
4		TATA	5.6				-1			n.a.	ratan tata

import pandas as pd

def convert(cell):
    if cell == 'n.a.':
        return "Sam Walton"
    return cell

def convertticker(cell):
    if cell == 'not available':
        return None
    return cell

df = pd.read_excel('/Users/Shaheen/Desktop/Vineet/MS_SE_Spring2019/Python/Pandas/stock_data.xlsx', "stock_data"
                  , converters ={
                      'people' : convert,
                      'eps' : convertticker
                      
                  })
df

0		GOOGL	27.82			87			845		larry page
1		WMT		4.61			484			65		Sam Walton
2		MSFT	-1	85			64					bill gates
3		NaN		not available	50			1023	mukesh ambani
4		TATA	5.6				-1			n.a.	ratan tata


=======================================
		Writing EXCEL File:
=======================================

import pandas as pd
df = pd.read_csv('/Users/Shaheen/Desktop/Vineet/MS_SE_Spring2019/Python/Pandas/stock_data.csv', na_values={
    'eps':["not available" , "n.a."],
    'revenue':["not available" , "n.a.", -1],
    'price':["not available" , "n.a."],
    'prople':["not available" , "n.a."],    
})
df
df.to_excel('/Users/Shaheen/Desktop/Vineet/MS_SE_Spring2019/Python/Pandas/new_excel.xlsx', sheet_name = "stock")

Index = False

import pandas as pd
df = pd.read_csv('/Users/Shaheen/Desktop/Vineet/MS_SE_Spring2019/Python/Pandas/stock_data.csv', na_values={
    'eps':["not available" , "n.a."],
    'revenue':["not available" , "n.a.", -1],
    'price':["not available" , "n.a."],
    'prople':["not available" , "n.a."],    
})
df
df.to_excel('/Users/Shaheen/Desktop/Vineet/MS_SE_Spring2019/Python/Pandas/new_excel.xlsx', sheet_name = "stock", index = False)


import pandas as pd
df = pd.read_csv('/Users/Shaheen/Desktop/Vineet/MS_SE_Spring2019/Python/Pandas/stock_data.csv', na_values={
    'eps':["not available" , "n.a."],
    'revenue':["not available" , "n.a.", -1],
    'price':["not available" , "n.a."],
    'prople':["not available" , "n.a."],    
})
df 
df.to_excel('/Users/Shaheen/Desktop/Vineet/MS_SE_Spring2019/Python/Pandas/new_excel.xlsx', sheet_name = "stock", startrow = 1, startcol=2,index = False)

Starts writing the excel at row 1 and column 2 [Both starts indexing from 0]

Writing data to two sheets of an excel:
=========================================

df_stocks = pd.DataFrame({
    'tickers': ['GOOGL', 'WMT', 'MSFT'],
    'price': [845, 65, 64 ],
    'pe': [30.37, 14.26, 30.97],
    'eps': [27.82, 4.61, 2.12]
})

df_weather =  pd.DataFrame({
    'day': ['1/1/2017','1/2/2017','1/3/2017'],
    'temperature': [32,35,28],
    'event': ['Rain', 'Sunny', 'Snow']
})

with pd.ExcelWriter('/Users/Shaheen/Desktop/Vineet/MS_SE_Spring2019/Python/Pandas/two_sheet.xlsx') as writer:
    df_stocks.to_excel(writer, sheet_name="stocks")
    df_weather.to_excel(writer, sheet_name="weather")


============================================================================================================
								Day 5 - Handling missing data
============================================================================================================

To replace 'NaN value
========================


import pandas as pd
df = pd.read_csv('/Users/Shaheen/Desktop/Vineet/MS_SE_Spring2019/Python/Pandas/Day5_MissingData.csv')
df

	day			temperature	windspeed	event
0	1/1/2017	32.0		6.0			Rain
1	1/4/2017	NaN			9.0			Sunny
2	1/5/2017	28.0		NaN			Snow

NOTE - index = False works when we are writing data to excel / csv

type(df.day[0]) : str

Use parse_dates column :

import pandas as pd
df = pd.read_csv('/Users/Shaheen/Desktop/Vineet/MS_SE_Spring2019/Python/Pandas/Day5_MissingData.csv', parse_dates =["day"])
df


import pandas as pd
df = pd.read_csv('/Users/Shaheen/Desktop/Vineet/MS_SE_Spring2019/Python/Pandas/Day5_MissingData.csv', parse_dates =["day"])
df


type(df.day[0]) : pandas._libs.tslibs.timestamps.Timestamp

	day			temperature	windspeed	event
0	2017-01-01	32.0		6.0			Rain
1	2017-01-04	NaN			9.0			Sunny
2	2017-01-05	28.0		NaN			Snow
3	2017-01-06	NaN			7.0			NaN

To set indexing : use inplace

import pandas as pd
df = pd.read_csv('/Users/Shaheen/Desktop/Vineet/MS_SE_Spring2019/Python/Pandas/Day5_MissingData.csv', parse_dates = ["day"])
df.set_index("day", inplace = True)
df

day			temperature	windspeed	event
2017-01-01	32.0		6.0			Rain
2017-01-04	NaN			9.0			Sunny
2017-01-05	28.0		NaN			Snow
2017-01-06	NaN			7.0			NaN

==========================================

Replacing NaN with 0 : Use fill na, avoid replace

df_new = df.fillna(0)
df_new

day			temperature	windspeed	event
2017-01-01	32.0		6.0			Rain
2017-01-04	0			9.0			Sunny
2017-01-05	28.0		0			Snow
2017-01-06	0			7.0			0

-----------------------

df

0	2017-01-01	32.0		6.0			Rain
1	2017-01-04	NaN			9.0			Sunny
2	2017-01-05	28.0		NaN			Snow
3	2017-01-06	NaN			7.0			NaN


df_new = df.fillna({
    'temperature' : 0,
    'windspeed' : 0,
    'event':"NoEvent"
})
df_new

day			temperature	windspeed	event
2017-01-01	32.0		6.0			Rain
2017-01-04	0			9.0			Sunny
2017-01-05	28.0		0			Snow
2017-01-06	0			7.0			NoEvent

=====>	ffill : Copies value vertically. If the last column which should be copied to another is NaN, it remains NaN
=====>  To copy previous day value in case of missing value use ffill

df_new = df.fillna(method = "ffill")
df_new

day			temperature	windspeed	event
2017-01-01	32.0		6.0			Rain
2017-01-04	32.0		9.0			Sunny
2017-01-05	28.0		9.0			Snow
2017-01-06	28.0		7.0			Snow

=====> To copy next day value use bfill:

df_new = df.fillna(method = "bfill")
df_new

=====>	axis : Copies value horizontally

df_new = df.fillna(method = "bfill", axis = "columns")
df_new


day			temperature	windspeed	event
2017-01-01	32			6			Rain
2017-01-04	9			9			Sunny
2017-01-05	28			Snow		Snow
2017-01-06	7			7			NaN

======> Limit : Limits the number of instances the value is copied

df_new = df.fillna(method = "ffill", limit = 1)
df_new


day			temperature	windspeed	event
2017-01-01	32.0		6.0			Rain
2017-01-04	32.0		9.0			Sunny
2017-01-05	28.0		9.0			Snow
2017-01-06	28.0		7.0			Snow
2017-01-07	32.0		7.0			Rain
2017-01-08	32.0		NaN			Sunny
2017-01-09	NaN			NaN			Sunny
2017-01-10	34.0		8.0			Cloudy
2017-01-11	40.0		12.0		Sunny

=====> Interpolate : To find the mean and update the values [Linear Interpolation]

df

day			temperature	windspeed	event
2017-01-01		32.0	6.0		Rain
2017-01-04		NaN		9.0		Sunny
2017-01-05		28.0	NaN		Snow
2017-01-06		NaN		7.0		NaN
2017-01-07		32.0	NaN		Rain
2017-01-08		NaN		NaN		Sunny
2017-01-09		NaN		NaN		NaN
2017-01-10		34.0	8.0		Cloudy
2017-01-11		40.0	12.0	Sunny

df_new = df.interpolate()
df_new

2017-01-01	32.0		6.0		Rain
2017-01-04	30.000000	9.00	Sunny
2017-01-05	28.000000	8.00	Snow
2017-01-06	30.000000	7.00	NaN
2017-01-07	32.000000	7.25	Rain
2017-01-08	32.666667	7.50	Sunny
2017-01-09	33.333333	7.75	NaN
2017-01-10	34.000000	8.00	Cloudy
2017-01-11	40.000000	12.00	Sunny

Here for 2017-01-01, the temp is 32.0
For 2017-01-05, the temp is 28
So for 2017-01-04, the value was not correctly interpolated 
==========> time

df_new = df.interpolate(method="time")
df_new

2017-01-01	32.0		6.0		Rain
2017-01-04	29.000000	9.00	Sunny
2017-01-05	28.000000	8.00	Snow
2017-01-06	30.000000	7.00	NaN
2017-01-07	32.000000	7.25	Rain
2017-01-08	32.666667	7.50	Sunny
2017-01-09	33.333333	7.75	NaN
2017-01-10	34.000000	8.00	Cloudy
2017-01-11	40.000000	12.00	Sunny

==========> To drop rows with NaN values : dropna() : Drops rows with atleast one NaN value

df_n = df.dropna()
df_n

2017-01-01	32.0	6.0		Rain
2017-01-10	34.0	8.0		Cloudy
2017-01-11	40.0	12.0	Sunny

To drop rows only with all values as null
=========================================

df

2017-01-04	NaN	9.0	Sunny
2017-01-05	28.0	NaN	Snow
2017-01-06	NaN	7.0	NaN
2017-01-07	32.0	NaN	Rain
2017-01-08	NaN	NaN	Sunny
2017-01-09	NaN	NaN	NaN
2017-01-10	34.0	8.0	Cloudy
2017-01-11	40.0	12.0	Sunny

df_n = df.dropna(how="all")
df_n

2017-01-01	32.0	6.0	Rain
2017-01-04	NaN	9.0	Sunny
2017-01-05	28.0	NaN	Snow
2017-01-06	NaN	7.0	NaN
2017-01-07	32.0	NaN	Rain
2017-01-08	NaN	NaN	Sunny
2017-01-10	34.0	8.0	Cloudy
2017-01-11	40.0	12.0	Sunny


=======> If we have any row with atleast one NaN value,keep it. Else, remove it

df_n = df.dropna(thresh=1)			
df_n

thresh=1 : Keep rows with atleast one valid value or one populated column

thresh=2 : Keep rows with atleast two valid value or two populated column

=======> To fill missing dates

first create date

dt = pd.date_range("01-01-2017","01-11-2017")
idx = pd.DatetimeIndex(dt)
df.reindex(idx)
df

2017-01-01	32.0	6.0	Rain
2017-01-04	NaN	9.0	Sunny
2017-01-05	28.0	NaN	Snow
2017-01-06	NaN	7.0	NaN
2017-01-07	32.0	NaN	Rain
2017-01-08	NaN	NaN	Sunny
2017-01-09	NaN	NaN	NaN
2017-01-10	34.0	8.0	Cloudy
2017-01-11	40.0	12.0	Sunny

============================================================================================================
								Day 6 - Handling missing data : Replace Function
============================================================================================================

REPLACE-
============>

import pandas as pd
import numpy as np
df = pd.read_csv('/Users/Shaheen/Desktop/Vineet/MS_SE_Spring2019/Python/Pandas/Day6_Replace.csv')
df

0	1/1/2017	32		6		Rain
1	1/2/2017	-99999	7		Sunny
2	1/3/2017	28		-99999	Snow
3	1/4/2017	-99999	7		0
4	1/5/2017	32		-99999	Rain
5	1/6/2017	31		2		Sunny
6	1/6/2017	34		5		0

df_new = df.replace(-99999,0)
df_new

0	1/1/2017	32		6		Rain
1	1/2/2017	0		7		Sunny
2	1/3/2017	28		0		Snow
3	1/4/2017	0		7		0
4	1/5/2017	32		0		Rain
5	1/6/2017	31		2		Sunny
6	1/6/2017	34		5		0

df_new = df.replace(-99999,np.NaN)
df_new

0	1/1/2017	32		6		Rain
1	1/2/2017	NaN		7		Sunny
2	1/3/2017	28		NaN		Snow
3	1/4/2017	NaN		7		0
4	1/5/2017	32		0		Rain
5	1/6/2017	31		NaN		Sunny
6	1/6/2017	34		5		0

To replace multiple values provide a list-

import pandas as pd
import numpy as np
df = pd.read_csv('/Users/Shaheen/Desktop/Vineet/MS_SE_Spring2019/Python/Pandas/Day6_Replace.csv')
df

0	1/1/2017	32		6		Rain
1	1/2/2017	-99999	7		Sunny
2	1/3/2017	28		-99999	Snow
3	1/4/2017	-99999	7		0
4	1/5/2017	32		-8888	Rain
5	1/6/2017	31		2		Sunny
6	1/6/2017	34		5		0

df_new = df.replace([-99999,-8888],0)
df_new

0	1/1/2017	32		6		Rain
1	1/2/2017	0		7		Sunny
2	1/3/2017	28		0		Snow
3	1/4/2017	0		7		0
4	1/5/2017	32		0		Rain
5	1/6/2017	31		2		Sunny
6	1/6/2017	34		5		0

df_new = df.replace([-99999,-8888],np.NaN)
df_new

day	temperature	windspeed	event
0	1/1/2017	32		6		Rain
1	1/2/2017	NaN		7		Sunny
2	1/3/2017	28		NaN		Snow
3	1/4/2017	NaN		7		0
4	1/5/2017	32		0		Rain
5	1/6/2017	31		NaN		Sunny
6	1/6/2017	34		5		0

We can also do the following to replace 0 in event.
df_new = df.replace([-99999,-8888, 0],np.NaN)
df_new
But this also sets the windspeed from 0 to NaN if it has any value as 0. This is not correct. To fix this-

df_new = df.replace(
    {
    'temperature': -99999,
    'windspeed' :[-99999,-8888],
    'event' :'0'
    }, np.NaN)
df_new


=======VS Fillna format =======

df_new = df.fillna({
    'temperature' : 0,
    'windspeed' : 0,
    'event':"NoEvent"
})
df_new

===============================
	day		temperature	windspeed	event
0	1/1/2017	32		6		Rain
1	1/2/2017	NaN		7		Sunny
2	1/3/2017	28		NaN		Snow
3	1/4/2017	NaN		7		NaN
4	1/5/2017	32		0		Rain
5	1/6/2017	31		NaN		Sunny
6	1/6/2017	34		5		NaN

OR-
=====

import pandas as pd
import numpy as np
df = pd.read_csv('/Users/Shaheen/Desktop/Vineet/MS_SE_Spring2019/Python/Pandas/Day6_ReplaceNew.csv')
df

0	1/1/2017	32		6		Rain
1	1/2/2017	-99999	7		Sunny
2	1/3/2017	28		-99999	Snow
3	1/4/2017	-99999	7		No Event
4	1/5/2017	32		-99999	Rain
5	1/6/2017	31		2		Sunny
6	1/6/2017	34		5		No Event

df_new = df.replace(
    {
    -99999: 0,
    -8888 : 0,
    'No Event' :'NaN'
    })
df_new

0	1/1/2017	32		6		Rain
1	1/2/2017	0		7		Sunny
2	1/3/2017	28		0		Snow
3	1/4/2017	0		7		NaN
4	1/5/2017	32		0		Rain
5	1/6/2017	31		2		Sunny
6	1/6/2017	34		5		NaN


REGEX -
=========
Assume the data looks like :
==============================

import pandas as pd
import numpy as np
df = pd.read_csv('/Users/Shaheen/Desktop/Vineet/MS_SE_Spring2019/Python/Pandas/Day6_ReplaceNew_Unit.csv')
df

	day		temperature	windspeed		event
0	1/1/17	32 F		6 mph			Rain
1	1/2/17	-99999		7 mph			Sunny
2	1/3/17	28 C		-99999			Snow
3	1/4/17	-99999		7				No Event
4	1/5/17	32			-8888			Rain
5	1/6/17	31			2 kph			Sunny
6	1/6/17	34			5				No Event

df_new = df.replace({
    'temperature':('[A-Za-z]'),
    'windspeed':('[A-Za-z]'),
},'',regex=True)
df_new


	day		temperature	windspeed	event
0	1/1/17	32			6			Rain
1	1/2/17	-99999		7			Sunny
2	1/3/17	28			-99999		Snow
3	1/4/17	-99999		7			No Event
4	1/5/17	32			-8888		Rain
5	1/6/17	31			2			Sunny
6	1/6/17	34			5			No Event

========================
df

	day		temperature	windspeed		event
0	1/1/17	32 F		6 mph			Rain
1	1/2/17	-99999		7 mph			Sunny
2	1/3/17	28 C		-99999			Snow
3	1/4/17	-99999		7				No Event
4	1/5/17	32			-8888			Rain
5	1/6/17	31			2 kph			Sunny
6	1/6/17	34			5				No Event

df_new = df.replace({
    'temperature':('[A-Za-z]'),
    'windspeed':('[A-Za-z]'),
},'',regex=True)
df_new

new = df_new.replace({
    'temperature':('-99999'),
    'windspeed':(['-99999','-8888']),
    'event':('No Event')
},np.NaN)

new

	day		temperature	windspeed	event
0	1/1/17	32			6			Rain
1	1/2/17	NaN			7			Sunny
2	1/3/17	28			NaN			Snow
3	1/4/17	NaN			7			NaN
4	1/5/17	32			NaN			Rain
5	1/6/17	31			2			Sunny
6	1/6/17	34			5			NaN

Replacing list with another list
==================================


df = pd.DataFrame({
    'score': ['exceptional','average', 'good', 'poor', 'average', 'exceptional'],
    'student': ['rob', 'maya', 'parthiv', 'tom', 'julian', 'erica']
})
df

	score		student
0	exceptional	rob
1	average		maya
2	good		parthiv
3	poor		tom
4	average		julian
5	exceptional	erica

df_new = df.replace(['exceptional','average','good','poor'],[1,2,3,4])
df_new

	score	student
0	1		rob
1	2		maya
2	3		parthiv
3	4		tom
4	2		julian
5	1		erica