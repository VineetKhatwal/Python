============================================================================================================
								Day 7 - Group By (Split Apply Combine)
============================================================================================================

import pandas as pd
import numpy as np
df = pd.read_csv('/Users/Shaheen/Desktop/Vineet/MS_SE_Spring2019/Python/Pandas/Day7_GroupBy.csv')
df

	day			city		temperature	windspeed	event
0	1/1/2017	new york	32			6			Rain
1	1/2/2017	new york	36			7			Sunny
2	1/3/2017	new york	28			12			Snow
3	1/4/2017	new york	33			7			Sunny
4	1/1/2017	mumbai		90			5			Sunny
5	1/2/2017	mumbai		85			12			Fog
6	1/3/2017	mumbai		87			15			Fog
7	1/4/2017	mumbai		92			5			Rain
8	1/1/2017	paris		45			20			Sunny
9	1/2/2017	paris		50			13			Cloudy
10	1/3/2017	paris		54			8			Cloudy
11	1/4/2017	paris		42			10			Cloudy

GROUP BY-
---------

d = df.groupby('city')
d

We get a data frame group by object : <pandas.core.groupby.generic.DataFrameGroupBy object at 0x11f303748>

We get the group by attribute(key) and the corresponding data frame in d

for city, city_df in d:
    print(city)
    print(city_df)
    
mumbai
        day    city  temperature  windspeed  event
4  1/1/2017  mumbai           90          5  Sunny
5  1/2/2017  mumbai           85         12    Fog
6  1/3/2017  mumbai           87         15    Fog
7  1/4/2017  mumbai           92          5   Rain

new york
        day      city  temperature  windspeed  event
0  1/1/2017  new york           32          6   Rain
1  1/2/2017  new york           36          7  Sunny
2  1/3/2017  new york           28         12   Snow
3  1/4/2017  new york           33          7  Sunny

paris
         day   city  temperature  windspeed   event
8   1/1/2017  paris           45         20   Sunny
9   1/2/2017  paris           50         13  Cloudy
10  1/3/2017  paris           54          8  Cloudy
11  1/4/2017  paris           42         10  Cloudy

========================================================
for i in d:
    print(i)
    
('mumbai',         day    city  temperature  windspeed  event
4  			1/1/2017  mumbai           90          5  Sunny
5 			1/2/2017  mumbai           85         12    Fog
6  			1/3/2017  mumbai           87         15    Fog
7  			1/4/2017  mumbai           92          5   Rain)

('new york',         day      city  temperature  windspeed  event
0  			1/1/2017  new york           32          6   Rain
1  			1/2/2017  new york           36          7  Sunny
2  			1/3/2017  new york           28         12   Snow
3  			1/4/2017  new york           33          7  Sunny)

('paris',          day   city  temperature  windspeed   event
8   		1/1/2017  paris           45         20   Sunny
9   		1/2/2017  paris           50         13  Cloudy
10  		1/3/2017  paris           54          8  Cloudy
11  		1/4/2017  paris           42         10  Cloudy)

========================================================

What's the most common complaint type?

This is a really easy question to answer! There's a .value_counts() method that we can use:

complaints['Complaint Type'].value_counts() : 

HEATING                              11512
Street Light Condition                2995
GENERAL CONSTRUCTION                  2947
PLUMBING                              2148

To print the first entry in each group :

d.first()

city		day     	temperature  windspeed   event
mumbai		1/1/2017	90				5			Sunny
new york	1/1/2017	32				6			Rain
paris		1/1/2017	45				20			Sunny

To get a specific group :
============================

d.get_group('new york')

        day      city  temperature  windspeed  event
0  1/1/2017  new york           32          6   Rain
1  1/2/2017  new york           36          7  Sunny
2  1/3/2017  new york           28         12   Snow
3  1/4/2017  new york           33          7  Sunny

===================>

Aggregation :

For a specific city:
=====================
import numpy as np
grp = d.get_group('mumbai')
grp['temperature'].agg(np.mean)

Ans = 88.5


City Wise:
===============

d = df.groupby('city')
d.mean()

city		temperature	windspeed
mumbai		88.50		9.25
new york	32.25		8.00
paris		47.75		12.75

import numpy as np
d['temperature'].agg(np.mean)

city
mumbai      88.50
new york    32.25
paris       47.75
Name: temperature, dtype: float64

OR

d['temperature'].mean()

city
mumbai      88.50
new york    32.25
paris       47.75
Name: temperature, dtype: float64

=================>
To get the max values for each city

d.max()

city		day		temperature	windspeed	event				
mumbai		1/4/2017	92			15		Sunny
new york	1/4/2017	36			12		Sunny
paris		1/4/2017	54			20		Sunny

This method is called Split Combine Apply method

Using dataframe the results wud be like-

df.max()

day            1/4/2017
city              paris
temperature          92
windspeed            20
event             Sunny
dtype: object

=====================>

For any specific column:

d['temperature'].max()

city
mumbai      92
new york    36
paris       54
Name: temperature, dtype: int64

Average speed

d.mean()

d.describe()

%matplotlib inline
d.plot()

Gives the graph

Max temperature for Paris:

1======>

import pandas as pd
df = pd.read_csv('/Users/Shaheen/Desktop/Vineet/MS_SE_Spring2019/Python/Pandas/Day7_GroupBy.csv')
df

df = df[df.city=='paris']
df[df.temperature == df.temperature.max()]

2======>

d = df.groupby('city')
grp = d.get_group('paris')
grp['temperature'].max()

To get mean :
============
import numpy as np
grouped = d.get_group('paris')
grouped['temperature'].agg(np.mean)


import numpy as np
grouped = d.get_group('paris')
grouped['temperature'].agg([np.mean, np.max, np.min])

mean    47.75
amax    54.00
amin    42.00
Name: temperature, dtype: float64


============================================================================================================
								Day 8 - Concatenate Data Frames
============================================================================================================

Frame 1-

import pandas as pd

india_weather = pd.DataFrame({
    "city" : ["Mumbai","Delhi","Bangalore"],
    "temperature" :[32,45,30],
    "humidity" : [80,60,78]
})
india_weather

Frame 2-

import pandas as pd

us_weather = pd.DataFrame({
    "city" : ["New York","Chicago","Orlando"],
    "temperature" :[21,14,35],
    "humidity" : [68,65,75]
})
us_weather

CONCAT -
========


df = pd.concat([india_weather,us_weather])
df

	city		temperature	humidity
0	Mumbai		32			80
1	Delhi		45			60
2	Bangalore	30			78
0	New York	21			68
1	Chicago		14			65
2	Orlando		35			75

NOTE : New York index starts at 0, to fix this pass ignore_index = True in concat function
=============================================================================================
df = pd.concat([india_weather,us_weather], ignore_index = True)
df

	city		temperature	humidity
0	Mumbai		32			80
1	Delhi		45			60
2	Bangalore	30			78
3	New York	21			68
4	Chicago		14			65
5	Orlando		35			75


=========================> 
Keys: Creates additional key

df = pd.concat([india_weather,us_weather], keys = ['India','US'] )
df


			city		temperature	humidity
India	0	Mumbai			32		80
		1	Delhi			45		60
		2	Bangalore		30		78
US		0	New York		21		68
		1	Chicago			14		65
		2	Orlando			35		75


df.loc['India']

	city		temperature	humidity
0	Mumbai			32		80
1	Delhi			45		60
2	Bangalore		30		78

=========================> 
import pandas as pd
temperature = pd.DataFrame({
 	"city" : ["Mumbai","Delhi","Bangalore"],
    "temp" :[42,48,33]
})
temperature

	city		temp
0	Mumbai		42
1	Delhi		48
2	Bangalore	33

import pandas as pd
windspeed = pd.DataFrame({
 	"city" : ["Mumbai","Delhi","Bangalore"],
    "temp" :[15,17,13],
})
windspeed


	city		temp
0	Mumbai		15
1	Delhi		17
2	Bangalore	13

df = pd.concat([temperature,windspeed])
df

	city		temp
0	Mumbai		42
1	Delhi		48
2	Bangalore	33
0	Mumbai		15
1	Delhi		17
2	Bangalore	13

By default axis = 0

df = pd.concat([temperature,windspeed], axis = 1)
df

	city		temp	city		temp
0	Mumbai		42		Mumbai		15
1	Delhi		48		Delhi		17
2	Bangalore	33		Bangalore	13


=========================> 

When order of cities is different:

import pandas as pd
windspeed = pd.DataFrame({
 	"city" : ["Delhi","Mumbai"],
    "temp" :[23,19],
})
windspeed


df = pd.concat([temperature,windspeed], axis = 1)
df

	city		temp	city	temp
0	Mumbai		42		Delhi	23.0
1	Delhi		48		Mumbai	19.0
2	Bangalore	33		NaN		NaN


To fix the issue related to Mumbai and Delhi coming at same place:

Using Index -
============


import pandas as pd
temperature = pd.DataFrame({
 	"city" : ["Mumbai","Delhi","Bangalore"],
    "temp" :[42,48,33]
}, index=[0,1,2])
temperature

	city		temp
0	Mumbai		42
1	Delhi		48
2	Bangalore	33


import pandas as pd
windspeed = pd.DataFrame({
 	"city" : ["Delhi","Mumbai"],
    "temp" :[23,19],
}, index =[1,0])
windspeed

	city	temp
1	Delhi	23
0	Mumbai	19


df = pd.concat([temperature,windspeed], axis = 1)
df

	city		temp	city	temp
0	Mumbai		42		Mumbai	19.0
1	Delhi		48		Delhi	23.0
2	Bangalore	33		NaN		NaN

================> 

To concat series:

s = pd.Series(["Humid","Dry","Rain"], name = "event")
s


df = pd.concat([temperature,s], axis = 1)
df

	city		temp	event
0	Mumbai		42		Humid
1	Delhi		48		Dry
2	Bangalore	33		Rain


============================================================================================================
								Day 9 - Merge Dataframes [Similar to Joins]
============================================================================================================


import pandas as pd
df1 = pd.DataFrame({
    "city":["newyork","chicago","orlando"],
    "temperature" :[21,14,35]
})
df1

	city	temperature
0	newyork	21
1	chicago	14
2	orlando	35

import pandas as pd
df2 = pd.DataFrame({
    "city":["chicago","newyork","orlando"],
    "himidity" :[65,68,75]
}, index = [1,0,2])
df2

	city	himidity
1	chicago	65
0	newyork	68
2	orlando	75

import pandas as pd
df = pd.concat([df1,df2], axis = 1)
df

	city	temperature	city	himidity
0	newyork	21			newyork	68
1	chicago	14			chicago	65
2	orlando	35			orlando	75


pd.merge(df1,df2, on ="city")

	city	temperature	himidity
0	newyork	21			68
1	chicago	14			65
2	orlando	35			75

====================================================

import pandas as pd
df1 = pd.DataFrame({
    "city":["newyork","chicago","orlando", "baltimore"],
    "temperature" :[21,14,35, 29]
})
df1

	city	temperature
0	newyork		21
1	chicago		14
2	orlando		35
3 	baltimore	29

import pandas as pd
df2 = pd.DataFrame({
    "city":["chicago","newyork","orlando","san fran"],
    "himidity" :[65,68,75,56]
})
df2

	city	himidity
1	chicago	65
0	newyork	68
2	orlando	75
3   san fran 56

import pandas as pd
df = pd.concat([df1,df2], axis = 1)
df

	city		temperature	city	himidity
0	newyork		21			newyork	68
1	chicago		14			chicago	65
2	orlando		35			orlando	75
3	baltimore	29			san fran 56

In merge, we see only matching records

Merge = Inner Join
===================

pd.merge(df1,df2, on ="city") is same as  pd.merge(df1,df2, on ="city", how ="inner")

	city	temperature	himidity
0	newyork	21			68
1	chicago	14			65
2	orlando	35			75

Full Outer Join : Use how
==========================
pd.merge(df1,df2, on ="city", how ="outer")


	city		temperature	himidity
0	newyork		21.0		68.0
1	chicago		14.0		65.0
2	orlando		35.0		75.0
3	baltimore	29.0		NaN
4	san fran	NaN		56.0


pd.merge(df1,df2, on ="city", how ="left")
pd.merge(df1,df2, on ="city", how ="right")

=============================
Use indicator flag to know which column is blank:

pd.merge(df1,df2, on ="city", how ="outer", indicator = True)

	city		temperature	himidity	_merge
0	newyork		21.0		68.0		both
1	chicago		14.0		65.0		both
2	orlando		35.0		75.0		both
3	baltimore	29.0		NaN			left_only
4	san fran	NaN			56.0		right_only

Suffix :

pd.merge(df1,df1, on ="city", suffixes =(_left, _right)

	city			temperature_x	temperature_y
0	newyork			21				21
1	chicago			14				14
2	orlando			35				35
3	baltimore		29				29


df = pd.merge(df1,df1, on ="city", suffixes =('_left', '_right'))
df

	city			temperature_left	temperature_right
0	newyork			21					21
1	chicago			14					14
2	orlando			35					35
3	baltimore		29					29